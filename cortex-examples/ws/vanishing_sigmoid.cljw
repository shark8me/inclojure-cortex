;; gorilla-repl.fileformat = 1

;; **
;;; # Exploring the vanishing sigmoid problem
;;; 
;;; In this notebook, we'll explore the vanishing gradient on sigmoid/tanh [issue](https://medium.com/@karpathy/yes-you-should-understand-backprop-e2f06eab496b).
;; **

;; @@
(ns vanishing-sigmoid
  (:require [gorilla-plot.core :as plot]                       
            [cortex.nn.execute :as execute]
            [cortex.nn.compute-binding :as compute-binding]
            [cortex.nn.network :as network]
            [clojure.java.io :refer [file]]
            [cortex.experiment.train :refer [train-n]]
            [cortex.experiment.classification :refer [perform-experiment]]
            
            [cortex.nn.traverse :as traverse]
            [cortex.graph :as graph]
            [cortex.nn.layers :as layers]
            [cortex.util :as util]
            [cortex.loss.core :as loss]
            [clojure.core.matrix :as m]
            [clojure.core.matrix.dataset :as cd]
            [core-matrix-gorilla.render :refer [mview]]
            [confuse.binary-class-metrics :refer [accuracy f1-score]]
            [cortex-examples.occupancy :as oc]
            ))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; @@
(defn make-net
  []
  (-> [(layers/input 1 1 1 :id :data)
       (layers/linear->tanh 1)
       (layers/logistic :id :labels)
       ]
      network/linear-network))

(def inp (range -1.0 1.0 0.05))
(def inet (make-net))
(defn trainx
  []
  (let [
         inp (mapv #(assoc {} :data [%] :labels [(if (> % 0) 1.0 0.0)]) inp)
        ;first-layer (-> inet :compute-graph :edges first second)
        ]
    (train-n inet inp inp :epoch-count 2 :batch-size 10
             :save-gradients? true)))
                 
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;vanishing-sigmoid/trainx</span>","value":"#'vanishing-sigmoid/trainx"}
;; <=

;; @@
(network/print-layer-summary inet (traverse/training-traversal inet))
;; @@
;; ->
;;; 
;;; |      type |     input |    output | :bias | :weights |
;;; |-----------+-----------+-----------+-------+----------|
;;; |   :linear | 1x1x1 - 1 | 1x1x1 - 1 |   [1] |    [1 1] |
;;; |     :tanh | 1x1x1 - 1 | 1x1x1 - 1 |       |          |
;;; | :logistic | 1x1x1 - 1 | 1x1x1 - 1 |       |          |
;;; Parameter count: 2
;;; 
;; <-
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; @@
(def res (trainx))
;; @@
;; ->
;;;  save gradients?  true
;;; CUDA backend creation failed, reverting to CPU
;;; Training network:
;;; 
;;; |      type |     input |    output | :bias | :weights |
;;; |-----------+-----------+-----------+-------+----------|
;;; |   :linear | 1x1x1 - 1 | 1x1x1 - 1 |   [1] |    [1 1] |
;;; |     :tanh | 1x1x1 - 1 | 1x1x1 - 1 |       |          |
;;; | :logistic | 1x1x1 - 1 | 1x1x1 - 1 |       |          |
;;; Parameter count: 2
;;; 
;;; |     :type |              :value | :lambda | :node-id | :argument |
;;; |-----------+---------------------+---------+----------+-----------|
;;; | :mse-loss | 0.24937491944932172 |     1.0 |  :labels |           |
;;; 
;;; Loss for epoch   1: (current) 0.24937492 (best) null [new best]
;;; 
;;; |     :type |              :value | :lambda | :node-id | :argument |
;;; |-----------+---------------------+---------+----------+-----------|
;;; | :mse-loss | 0.24851795691831433 |     1.0 |  :labels |           |
;;; 
;;; Loss for epoch   2: (current) 0.24851796 (best) 0.24937492 [new best]
;;; 
;; <-
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;vanishing-sigmoid/res</span>","value":"#'vanishing-sigmoid/res"}
;; <=

;; @@
(-> res :traversal :buffers keys)  
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-unkown'>({:stream :data} {:id :linear-1} {:id :tanh-1} {:id :labels} {:stream :labels})</span>","value":"({:stream :data} {:id :linear-1} {:id :tanh-1} {:id :labels} {:stream :labels})"}
;; <=

;; @@
(->> ((-> res :traversal :buffers ) {:id :linear-1}) :gradient (mapv seq) )
;; @@
;; =>
;;; {"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-unkown'>(-0.24983052909374237)</span>","value":"(-0.24983052909374237)"},{"type":"html","content":"<span class='clj-unkown'>(-0.2497669756412506)</span>","value":"(-0.2497669756412506)"},{"type":"html","content":"<span class='clj-unkown'>(-0.24970325827598572)</span>","value":"(-0.24970325827598572)"},{"type":"html","content":"<span class='clj-unkown'>(-0.2496393769979477)</span>","value":"(-0.2496393769979477)"},{"type":"html","content":"<span class='clj-unkown'>(-0.24957531690597534)</span>","value":"(-0.24957531690597534)"},{"type":"html","content":"<span class='clj-unkown'>(-0.24951112270355225)</span>","value":"(-0.24951112270355225)"},{"type":"html","content":"<span class='clj-unkown'>(-0.2494467943906784)</span>","value":"(-0.2494467943906784)"},{"type":"html","content":"<span class='clj-unkown'>(-0.24938227236270905)</span>","value":"(-0.24938227236270905)"},{"type":"html","content":"<span class='clj-unkown'>(-0.24931760132312775)</span>","value":"(-0.24931760132312775)"},{"type":"html","content":"<span class='clj-unkown'>(-0.24925276637077332)</span>","value":"(-0.24925276637077332)"}],"value":"[(-0.24983052909374237) (-0.2497669756412506) (-0.24970325827598572) (-0.2496393769979477) (-0.24957531690597534) (-0.24951112270355225) (-0.2494467943906784) (-0.24938227236270905) (-0.24931760132312775) (-0.24925276637077332)]"}
;; <=

;; @@
(->> ((-> res :traversal :buffers ) {:id :tanh-1}) :gradient (mapv seq) )
;; @@
;; =>
;;; {"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-unkown'>(-0.24983099102973938)</span>","value":"(-0.24983099102973938)"},{"type":"html","content":"<span class='clj-unkown'>(-0.24976783990859985)</span>","value":"(-0.24976783990859985)"},{"type":"html","content":"<span class='clj-unkown'>(-0.24970464408397675)</span>","value":"(-0.24970464408397675)"},{"type":"html","content":"<span class='clj-unkown'>(-0.24964141845703125)</span>","value":"(-0.24964141845703125)"},{"type":"html","content":"<span class='clj-unkown'>(-0.24957814812660217)</span>","value":"(-0.24957814812660217)"},{"type":"html","content":"<span class='clj-unkown'>(-0.2495148628950119)</span>","value":"(-0.2495148628950119)"},{"type":"html","content":"<span class='clj-unkown'>(-0.24945157766342163)</span>","value":"(-0.24945157766342163)"},{"type":"html","content":"<span class='clj-unkown'>(-0.2493882179260254)</span>","value":"(-0.2493882179260254)"},{"type":"html","content":"<span class='clj-unkown'>(-0.24932484328746796)</span>","value":"(-0.24932484328746796)"},{"type":"html","content":"<span class='clj-unkown'>(-0.24926142394542694)</span>","value":"(-0.24926142394542694)"}],"value":"[(-0.24983099102973938) (-0.24976783990859985) (-0.24970464408397675) (-0.24964141845703125) (-0.24957814812660217) (-0.2495148628950119) (-0.24945157766342163) (-0.2493882179260254) (-0.24932484328746796) (-0.24926142394542694)]"}
;; <=

;; @@
(->> ((-> res :traversal :buffers ) {:stream :data}) :gradient (mapv seq) )
;; @@
;; =>
;;; {"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-unkown'>(-0.002520710928365588)</span>","value":"(-0.002520710928365588)"},{"type":"html","content":"<span class='clj-unkown'>(-0.0025200697127729654)</span>","value":"(-0.0025200697127729654)"},{"type":"html","content":"<span class='clj-unkown'>(-0.002519426867365837)</span>","value":"(-0.002519426867365837)"},{"type":"html","content":"<span class='clj-unkown'>(-0.0025187821593135595)</span>","value":"(-0.0025187821593135595)"},{"type":"html","content":"<span class='clj-unkown'>(-0.0025181358214467764)</span>","value":"(-0.0025181358214467764)"},{"type":"html","content":"<span class='clj-unkown'>(-0.002517488319426775)</span>","value":"(-0.002517488319426775)"},{"type":"html","content":"<span class='clj-unkown'>(-0.002516839187592268)</span>","value":"(-0.002516839187592268)"},{"type":"html","content":"<span class='clj-unkown'>(-0.0025161881931126118)</span>","value":"(-0.0025161881931126118)"},{"type":"html","content":"<span class='clj-unkown'>(-0.00251553556881845)</span>","value":"(-0.00251553556881845)"},{"type":"html","content":"<span class='clj-unkown'>(-0.0025148815475404263)</span>","value":"(-0.0025148815475404263)"}],"value":"[(-0.002520710928365588) (-0.0025200697127729654) (-0.002519426867365837) (-0.0025187821593135595) (-0.0025181358214467764) (-0.002517488319426775) (-0.002516839187592268) (-0.0025161881931126118) (-0.00251553556881845) (-0.0025148815475404263)]"}
;; <=

;; @@
(-> res :traversal :buffers keys) 
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-unkown'>({:stream :data} {:id :linear-1} {:id :tanh-1} {:id :labels} {:stream :labels})</span>","value":"({:stream :data} {:id :linear-1} {:id :tanh-1} {:id :labels} {:stream :labels})"}
;; <=

;; @@
(defn get-resp
  [inet]
  (let [inp (mapv #(assoc {} :data [%] :labels [0.0]) inp)
        first-layer (-> inet :compute-graph :edges first second)]
    (->> inp 
         (execute/run (network/dissoc-layers-from-network inet :labels))
         (mapv (comp first first-layer))
         )))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-var'>#&#x27;vanishing-sigmoid/get-resp</span>","value":"#'vanishing-sigmoid/get-resp"}
;; <=

;; @@
(def nets (mapv make-net [
                          #(layers/relu)
                          #(layers/selu)
                          #(layers/prelu)
                          #(layers/tanh)
                          #(layers/logistic)                           
                          #(layers/swish)
                          ]))

(def resp (mapv get-resp nets))

(apply plot/compose
       (let [plt-resp (mapv #(mapv vector inp %) (take 3 resp))
             colors ["red" "blue" "green"  ]]
         (mapv #(plot/list-plot % 
                                :plot-range 
                                [[-1.2 1.2] [-1.2 1.2]] 
                                :color %2
                                :symbol-size 10) plt-resp colors )))
;; @@

;; @@

;; @@
